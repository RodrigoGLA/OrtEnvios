// <auto-generated />
using System;
using AccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccesoDatos.Migrations
{
    [DbContext(typeof(OrtContext))]
    [Migration("20250414225244_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DireccionPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencias", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroTracking")
                        .HasColumnType("int");

                    b.Property<string>("PesoPaquete")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId");

                    b.ToTable("Envios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId");

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Comun", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Envio");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Comunes", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Urgente", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Envio");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("DireccionPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnvioRapido")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ClienteId");

                    b.ToTable("Urgentes", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Cliente", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Usuario");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Empleado", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Usuario");

                    b.ToTable("Empleados", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Empleado");

                    b.ToTable("Administradores", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Funcionario", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Empleado");

                    b.ToTable("Funcionarios", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Envio", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Agencia", null)
                        .WithMany("Envios")
                        .HasForeignKey("AgenciaId");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuario", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Agencia", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("AgenciaId");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Comun", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Envio", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Comun", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Urgente", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Cliente", null)
                        .WithMany("EnviosUrgentes")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.EntidadesDominio.Envio", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Urgente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Cliente", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Usuario", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Empleado", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Usuario", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Empleado", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Administrador", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Empleado", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Administrador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Funcionario", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Empleado", null)
                        .WithOne()
                        .HasForeignKey("LogicaNegocio.EntidadesDominio.Funcionario", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Agencia", b =>
                {
                    b.Navigation("Envios");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Cliente", b =>
                {
                    b.Navigation("EnviosUrgentes");
                });
#pragma warning restore 612, 618
        }
    }
}
